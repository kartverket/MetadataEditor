@model Kartverket.MetadataEditor.Models.MetadataViewModel
@using Kartverket.MetadataEditor.Models
@using Resources
@using Kartverket.MetadataEditor.Helpers
@using Newtonsoft.Json;

@{
    ViewBag.Title = @Resources.UI.EditMetadata;

    JsonSerializerSettings settings = new JsonSerializerSettings();
    settings.ContractResolver = new DictionaryAsArrayResolver();

    string ViewModelSerialized = JsonConvert.SerializeObject(Model, settings);
    var ViewModelJson = @Html.Raw(ViewModelSerialized);
    string ViewBagSerialized = JsonConvert.SerializeObject(ViewBag);
    var ViewBagJson = @Html.Raw(ViewBagSerialized);


    bool showProductSheetGeneratorUrl = false;
    var ProductSheetGeneratorUrl = System.Web.Configuration.WebConfigurationManager.AppSettings["ProductSheetGeneratorUrl"];
    if (ProductSheetGeneratorUrl != null && ProductSheetGeneratorUrl != "")
        showProductSheetGeneratorUrl = true;
}

@section breadcrumb{
    <li>@Model.TitleFromSelectedLanguage</li>
}

@* Import sub components *@
@Html.Partial("VueComponents/Fields/_Field")
@Html.Partial("VueComponents/Edit/Keywords/MultilingualKeywords/_MultilingualKeyword")
@Html.Partial("VueComponents/Edit/Keywords/_MultilingualKeywords")

@* Import components *@
@Html.Partial("VueComponents/Edit/_Basic")
@Html.Partial("VueComponents/Edit/_TimeAndSpace")
@Html.Partial("VueComponents/Edit/_Contact")
@Html.Partial("VueComponents/Edit/_Distribution")
@Html.Partial("VueComponents/Edit/_Documents")
@Html.Partial("VueComponents/Edit/_Constraints")
@Html.Partial("VueComponents/Edit/_Keywords")
@Html.Partial("VueComponents/Edit/_Quality")
@Html.Partial("VueComponents/Edit/_Admin")




@* Import Vuex*@
@Html.Partial("VuexStore/_Store", Model)



<div class="pull-right">
    <p class="text-right">
        <small>UUID: @Model.Uuid</small><br />
        <small>Metadata sist oppdatert: @String.Format("{0:dd.MM.yyyy}", Model.DateMetadataUpdated)</small>
        <br />
        <small>
            <div class="label @Model.GetInnholdstypeCSS()">@Model.GetInnholdstype()</div>

            @if (!string.IsNullOrWhiteSpace(Model.ParentIdentifier) && Model.HierarchyLevel == "service")
            {
                <span>[<a href="@Url.Action("Edit", new { uuid = @Model.ParentIdentifier})">Lenke til tjenesten</a>]</span>
            }

        </small>
    </p>
    <script>
        function hideshow(which) {
            if (!document.getElementById)
                return;
            if (which.style.visibility == "visible") {
                which.style.display = "none";
                which.style.visibility = "hidden";
            }
            else {
                which.style.display = "inline-block";
                which.style.visibility = "visible";
            }
        }
    </script>
    <div id="validation" style="display: none; visibility: hidden;">
        Validert <span id="validatedDate"></span>: <span id="validationStatus"></span>, <a style="cursor:pointer" class="alert-info" onclick="javascript: hideshow(document.getElementById('validationResults'))">detaljer</a>
    </div>
    <div id="validationResults" style="display:inline-block; visibility:hidden; position:absolute; width: 400px; height: auto; z-index: 3; background-color: white; border: 1px solid black;">
    </div>
</div>

<h3>@ViewBag.Title</h3>
<h2>@Model.TitleFromSelectedLanguage</h2>

@if (ViewBag.Saved == true)
{
    <div class="alert alert-success">
        Metadata ble lagret.
    </div>
}
@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger">
        Det har oppstått en feil: @ViewBag.ErrorMessage
    </div>
}

@Html.ValidationSummary(false, "Skjemaet er ikke korrekt utfylt. Vennligst rett opp følgende feil og mangler:", new { @class = "alert alert-danger" })

<form action="@Url.Action("Edit", new { uuid = Model.Uuid })" method="post" class="form form-horizontal" role="form" onkeydown="@(TempData["success"] != null ? "removeokmsg();" : "" )">
    <div id="vue-container">
        <ul class="nav nav-tabs">
            <li v-for="tab in tabs" v-on:click="setSelectTab(tab)" v-bind:class="{active: selectedTab.id == tab.id}">
                <a href="#">
                    <span v-bind:class="tab.iconClass"></span>
                    {{ tab.name }}
                </a>
            </li>
        </ul>
        <div v-bind:is="tab.id" v-show="selectedTab.id == tab.id" v-for="tab in tabs"></div>
    </div>

    @Html.HiddenFor(m => m.Uuid)
    @Html.HiddenFor(m => m.DateMetadataUpdated)
    @Html.HiddenFor(m => m.HierarchyLevel)
    @if (Model.IsService())
    {
        <div id="operatesOn" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="operatesOn" aria-hidden="true">
            @Html.Partial("_OperatesOn", Model)
        </div>
        <div id="parentIdentifier" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="parentIdentifier" aria-hidden="true">
            @Html.Partial("_ParentIdentifier", Model)
        </div>
    }
    @if (Model.IsSoftware())
    {
        <div id="crossReference" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="crossReference" aria-hidden="true">
            @Html.Partial("_CrossReference", Model)
        </div>
    }

    @section ActionMenu {
        <div class="btn-group">
            @*<a href="@ViewBag.GeoNetworkXmlDownloadUrl" class="btn btn-sm btn-default">
                    <i class="glyphicon glyphicon-file"></i> Last ned XML
                </a>*@

            <a href="@ViewBag.KartkatalogViewUrl" target="_blank" class="btn btn-sm btn-default">
                <span class="glyphicon glyphicon-share-alt"></span> Vis i kartkatalogen
            </a>
            @if (Model.IsService() && string.IsNullOrWhiteSpace(Model.ParentIdentifier))
            {
                if (@Model.DistributionProtocol != null && @Model.DistributionProtocol.Contains("OGC:WMS"))
                {
                    <a href="@Url.Action("Index", "Service", new { uuid = @Model.Uuid })" class="btn btn-sm btn-default">
                        <span class="glyphicon glyphicon-plus-sign"></span> Opprett metadata for tjenestelag
                    </a>
                }
                if (@Model.DistributionProtocol != null && @Model.DistributionProtocol.Contains("OGC:WFS"))
                {
                    <a href="@Url.Action("Index", "ServiceWfs", new { uuid = @Model.Uuid })" class="btn btn-sm btn-default">
                        <span class="glyphicon glyphicon-plus-sign"></span> Opprett metadata for tjenestelag
                    </a>
                }
            }
            @if (Model.IsDataset() && showProductSheetGeneratorUrl)
            {
                <a href="@ViewBag.CreateProductSheetUrl" class="btn btn-sm btn-default"><span class="glyphicon glyphicon-list-alt"></span> Opprett produktark</a>
            }

            @if (Model.IsService())
            {
                <a href="#" role="button" data-toggle="modal" id="operatesOnLink" data-target="#operatesOn" class="btn btn-sm btn-default"><span class="glyphicon glyphicon-list-alt"></span> Koble til datasett</a>
                <a href="#" role="button" data-toggle="modal" id="parentIdentifierLink" data-target="#parentIdentifier" class="btn btn-sm btn-default"><span class="glyphicon glyphicon-list-alt"></span> Koble til tjeneste</a>
            }
            @if (Model.IsSoftware())
            {
                <a href="#" role="button" data-toggle="modal" id="crossReferenceLink" data-target="#crossReference" class="btn btn-sm btn-default"><span class="glyphicon glyphicon-list-alt"></span> Koble til datasett</a>
            }
        </div>
    }

    <div class="form-group">
        <div class="col-sm-12 text-right">
            <button onclick="location.href='@Url.Action("ConfirmDelete")?uuid=@Model.Uuid';return false;" name="action" type="button" class="btn btn-primary" value="">Slett</button>
            @if (!Html.ViewData.ModelState.IsValid /*&& ViewBag.IsAdmin == "1"*/)
            {
                <input type="checkbox" name="ignoreValidationError" value="1" /> <span>Ignorer feil</span>
            }
            else
            {
                <input type="hidden" name="ignoreValidationError" value="0" />
            }
            <input type="hidden" name="published" value="true" />
            @*}*@
            <button name="action" type="submit" class="btn btn-primary show-loading-animation" value="@UI.Button_Save" data-loading-message="Lagrer metadata">@UI.Button_Save</button>
        </div>
    </div>


</form>

@section scripts {
    <script>
        $(function () {

            //  add warning sign to tabs containing input fields with error.
            $('.input-validation-error').each(function () {
                var inputElement = $(this);
                var id = inputElement.closest(".tab-pane").attr('id');
                var tabLink = $('ul.nav-tabs a[href="#' + id + '"]');

                inputElement.closest('.form-group').addClass('has-error');
                tabLink.parent().addClass("has-error");

                var warning = tabLink.parent().find('span.glyphicon-warning-sign');
                if (warning.length == 0) {
                    tabLink.parent().attr('data-toggle', 'tooltip');
                    tabLink.parent().prop('title', 'Skillearket inneholder feil og mangler som må rettes opp før innsending av skjemaet');
                }
            });
       
            // conformity

            var conformExplanation = "Dataene er i henhold til produktspesifikasjonen";
            var conformExplanationEnglish = "The data is according to the product specification";
            var conformExplainPlaceholder = "Beskriv avvikene fra spesifikasjonen";

            $('#QualitySpecificationTitleInspire').prop('readonly', true);
            if ($('#QualitySpecificationTitleInspire').val() == "")
                $('#QualitySpecificationInspire').hide();
            $('#QualitySpecificationTitleSosi').prop('readonly', true);
            if ($('#QualitySpecificationTitleSosi').val() == "")
                $('#QualitySpecificationSosi').hide();
            $('#QualitySpecificationTitle').prop('readonly', true);
            if ($('#QualitySpecificationTitle').val() == "")
                $('#QualitySpecificationCustom').hide();

            $('#QualitySpecificationDateTypeInspire').prop('readonly', true);
            $('#QualitySpecificationDateTypeSosi').prop('readonly', true);
            $('#QualitySpecificationDateType').prop('readonly', true);

            $('#QualitySpecificationDateInspire').prop('readonly', true);
            $('#QualitySpecificationDateSosi').prop('readonly', true);


            var Inspire = function (event) {
                if (event) {
                    if (!$('#keyword-inspire-valid').prop('checked'))
                    {
                        InspireRemove();
                    }
                    else {
                        if ($("#QualitySpecificationTitleInspire").val().trim() == "")
                            $("#QualitySpecificationTitleInspire").val("COMMISSION REGULATION (EU) No 1089/2010 of 23 November 2010 implementing Directive 2007/2/EC of the European Parliament and of the Council as regards interoperability of spatial data sets and services");
                        if ($("#QualitySpecificationDateInspire").val().trim() == "")
                            $("#QualitySpecificationDateInspire").val("08.12.2010");
                        if ($("#QualitySpecificationDateTypeInspire").val().trim() == "")
                            $("#QualitySpecificationDateTypeInspire").val("publication");

                        $('#QualitySpecificationInspire').show();
                    }
                }
            };

            $("#keyword-inspire-valid").on("change", Inspire);
            Inspire();


            function InspireRemove() {
                $("#QualitySpecificationTitleInspire").val("");
                $("#QualitySpecificationDateInspire").val("");
                $("#QualitySpecificationDateTypeInspire").val("");
                $("#QualitySpecificationExplanationInspire").val("");
                $("#EnglishQualitySpecificationExplanationInspire").val("");
                $("#QualitySpecificationResultInspireConform").prop('checked', false);
                $('#QualitySpecificationInspire').hide();
            };

            var Sosi = function (event) {

                var sosiKeyword = false;

                if ($('#keyword-dok-valid-kmd').is(":checked") || $('#keyword-geodatalaw').is(":checked")
                    || $('#keyword-norgedigitalt').is(":checked") || $('#keyword-areal-plans').is(":checked"))
                    sosiKeyword = true;

                var selectedSosi = $('#ProductSpecificationUrl option:selected').text();
                var selectedSosiUrl = $('#ProductSpecificationUrl option:selected').val();
                if (sosiKeyword) {
                    if (selectedSosiUrl.startsWith("http")) {
                        console.log("sosi not selected:" + selectedSosi);
                        $("#QualitySpecificationTitleSosi").val("SOSI-produktspesifikasjon: " + selectedSosi);
                        $('#QualitySpecificationSosi').show();
                        $("#QualitySpecificationSosiTitle").show();
                        $("#QualitySpecificationSosiDate").show();
                        $("#QualitySpecificationSosiResult").show();
                        $("#QualitySpecificationExplanationSosiDiv").show();
                    }
                    else if ($("#ApplicationSchema").val() != '')
                    {
                        $("#QualitySpecificationTitleSosi").val("");
                        $("#QualitySpecificationDateSosi").val("");
                        $("#QualitySpecificationDateTypeSosi").val("");
                        $("#QualitySpecificationExplanationSosi").val("");
                        $("#EnglishQualitySpecificationExplanationSosi").val("");
                        $("#QualitySpecificationResultSosiNotConform").prop('checked', false);

                        $('#QualitySpecificationSosi').show();
                        $("#QualitySpecificationSosiTitle").hide();
                        $("#QualitySpecificationSosiDate").hide();
                        $("#QualitySpecificationSosiResult").hide();
                        $("#QualitySpecificationExplanationSosiDiv").hide();
                    }
                    console.log("selectedSosiUrl:"  + selectedSosiUrl);
                    if (selectedSosiUrl != null) {
                        var selectedSosiUrlApi = selectedSosiUrl;
                        selectedSosiUrlApi = selectedSosiUrlApi.replace("/register/", "/api/register/");

                        $.getJSON(selectedSosiUrlApi, function (result) {
                            if (result != null) {
                                if (result.length != 0) {
                                    var QualitySpecificationDateSosiFromRegister = "";
                                    var dateAccepted = result.dateAccepted;
                                    if (dateAccepted != "0001-01-01T00:00:00") // Not accepted
                                    {
                                        var dateAccept = new Date(dateAccepted);
                                        QualitySpecificationDateSosiFromRegister = dateAccept.getDate() + "." + (dateAccept.getMonth() + 1) + "." + dateAccept.getFullYear();
                                    }
                                    else {
                                        var dateSubmitted = result.dateSubmitted;
                                        var dateSubmit = new Date(dateSubmitted);
                                        QualitySpecificationDateSosiFromRegister = dateSubmit.getDate() + "." + (dateSubmit.getMonth() + 1) + "." + dateSubmit.getFullYear();
                                    }

                                    var applicationSchema = result.ApplicationSchema;
                                    if (applicationSchema != null)
                                        $("#ApplicationSchema").val(applicationSchema);

                                    $("#QualitySpecificationDateSosi").val(QualitySpecificationDateSosiFromRegister);
                                }
                            }
                        }
                    )
                    };

                    if ($("#ApplicationSchema").val() != '') {
                        $('#QualitySpecificationSosi').show();
                        $("#QualitySpecificationSosiConformApplicationSchema").show();
                        if (!selectedSosiUrl.startsWith("http")) {
                            $("#QualitySpecificationSosiTitle").hide();
                            $("#QualitySpecificationSosiDate").hide();
                            $("#QualitySpecificationSosiResult").hide();
                            $("#QualitySpecificationExplanationSosiDiv").hide();
                        }
                    }
                    else {
                        $("#QualitySpecificationSosiConformApplicationSchema").hide();
                        $("#QualitySpecificationResultSosiConformApplicationSchema").prop('checked', false);
                        $("#QualitySpecificationResultSosiConformGmlApplicationSchema").prop('checked', false);
                    }
                }
                else {
                    $("#QualitySpecificationTitleSosi").val("");
                    $("#QualitySpecificationDateSosi").val("");
                    $("#QualitySpecificationDateTypeSosi").val("");
                    $("#QualitySpecificationExplanationSosi").val("");
                    $("#EnglishQualitySpecificationExplanationSosi").val("");
                    $("#QualitySpecificationResultSosiNotConform").prop('checked', false);
                    $('#QualitySpecificationSosi').hide();
                }

            };

            $("#keyword-dok-valid-kmd").on("change", Sosi);
            $("#keyword-geodatalaw").on("change", Sosi);
            $("#keyword-norgedigitalt").on("change", Sosi);
            $("#keyword-areal-plans").on("change", Sosi);


            var otherSpec = function (event) {
                    var selectedOtherSpec = $('#ProductSpecificationOther_Name').val();
                    if (selectedOtherSpec != "") {
                        $("#QualitySpecificationTitle").val("Produktspesifikasjon: " + selectedOtherSpec);
                        $("#QualitySpecificationDate").val("");
                        $("#QualitySpecificationDateType").val("publication");
                        $("#QualitySpecificationResultConform").prop('checked', true);
                        $("#QualitySpecificationExplanation").val(conformExplanation);
                        $("#EnglishQualitySpecificationExplanation").val(conformExplanationEnglish);
                        $('#QualitySpecificationExplanationDiv').hide();
                        $('#QualitySpecificationCustom').show();
                    }
                    else {
                        $("#QualitySpecificationTitle").val("");
                        $("#QualitySpecificationDate").val("");
                        $("#QualitySpecificationDateType").val("");
                        $("#QualitySpecificationExplanation").val("");
                        $("#QualitySpecificationResultConform").prop('checked', false);
                        $('#QualitySpecificationCustom').hide();
                    }
                };

            $("#ProductSpecificationOther_Name").on("change", otherSpec);
            otherSpec();

            $("#QualitySpecificationResultInspireConform").change(function () {
                    if (this.checked) {
                    $("#QualitySpecificationExplanationInspire").val(conformExplanation);
                    $("#EnglishQualitySpecificationExplanationInspire").val(conformExplanationEnglish);
                    $("#QualitySpecificationExplanationInspireDiv").removeClass("show");
                    $("#QualitySpecificationExplanationInspireDiv").addClass("hidden");
                        }
                        });

            $("#QualitySpecificationResultInspireNotConform").change(function () {
                        if (this.checked) {
                    $("#QualitySpecificationExplanationInspire").val("");
                    $("#EnglishQualitySpecificationExplanationInspire").val("");
                    $("#QualitySpecificationExplanationInspire").attr("placeholder", conformExplainPlaceholder);
                    $("#QualitySpecificationExplanationInspireDiv").removeClass("hidden");
                    $("#QualitySpecificationExplanationInspireDiv").addClass("show");
                            }
                            });

            $("#QualitySpecificationResultSosiConform").change(function () {
                            if (this.checked) {
                    $("#QualitySpecificationExplanationSosi").val(conformExplanation);
                    $("#EnglishQualitySpecificationExplanationSosi").val(conformExplanationEnglish);
                    $("#QualitySpecificationExplanationSosiDiv").removeClass("show");
                    $("#QualitySpecificationExplanationSosiDiv").addClass("hidden");
                                }
                                });

            $("#QualitySpecificationResultSosiNotConform").change(function () {
                                if (this.checked) {
                    $("#QualitySpecificationExplanationSosi").val("");
                    $("#EnglishQualitySpecificationExplanationSosi").val("");
                    $("#QualitySpecificationExplanationSosi").attr("placeholder", conformExplainPlaceholder);
                    $("#QualitySpecificationExplanationSosiDiv").removeClass("hidden");
                    $("#QualitySpecificationExplanationSosiDiv").addClass("show");
                                    }
                                    });

            $("#QualitySpecificationResultConform").change(function () {
                                    if (this.checked) {
                    $("#QualitySpecificationExplanation").val(conformExplanation);
                    $("#EnglishQualitySpecificationExplanation").val(conformExplanationEnglish);
                    $("#QualitySpecificationExplanationDiv").removeClass("show");
                    $("#QualitySpecificationExplanationDiv").addClass("hidden");
                                        }
                                        });

            $("#QualitySpecificationResultNotConform").change(function () {
                                        if (this.checked) {
                    $("#QualitySpecificationExplanation").val("");
                    $("#EnglishQualitySpecificationExplanation").val("");
                    $("#QualitySpecificationExplanation").attr("placeholder", conformExplainPlaceholder);
                    $("#QualitySpecificationExplanationDiv").removeClass("hidden");
                    $("#QualitySpecificationExplanationDiv").addClass("show");
                                            }
                                            });




            // Check date not in future
            $("#DateUpdated").change(function (event) {
                event.preventDefault();
                var currentDate = new Date();
                var selectedDateStr = $('#DateUpdated').val();
                var selectedDateArr = selectedDateStr.split('.');
                var selectedDate = new Date(selectedDateArr[2], selectedDateArr[1] - 1, selectedDateArr[0]);
                if (selectedDate > currentDate) {
                    alert('Dato kan ikke være i fremtiden');
                    $('#DateUpdated').val(currentDate.getDate() + '.' + (currentDate.getMonth() + 1) + '.' + currentDate.getFullYear())
                        }
            });

            $("#DatePublished").change(function (event) {
                event.preventDefault();
                var currentDate = new Date();
                var selectedDateStr = $('#DatePublished').val();
                var selectedDateArr = selectedDateStr.split('.');
                var selectedDate = new Date(selectedDateArr[2], selectedDateArr[1] - 1, selectedDateArr[0]);
                if (selectedDate > currentDate) {
                    alert('Dato kan ikke være i fremtiden');
                    $('#DatePublished').val(currentDate.getDate() + '.' + (currentDate.getMonth() + 1) + '.' + currentDate.getFullYear())
                        }
            });

            $("#DateCreated").change(function (event) {
                event.preventDefault();
                var currentDate = new Date();
                var selectedDateStr = $('#DateCreated').val();
                var selectedDateArr = selectedDateStr.split('.');
                var selectedDate = new Date(selectedDateArr[2], selectedDateArr[1] - 1, selectedDateArr[0]);
                if (selectedDate > currentDate) {
                    alert('Dato kan ikke være i fremtiden');
                    $('#DateCreated').val(currentDate.getDate() + '.' + (currentDate.getMonth() + 1) + '.' + currentDate.getFullYear())
                        }
            });

            $("#DateMetadataValidFrom").change(function (event) {
                event.preventDefault();
                var selectedDateStr = $('#DateMetadataValidFrom').val();
                var selectedDateArr = selectedDateStr.split('.');
                var selectedDate = new Date(selectedDateArr[2], selectedDateArr[1] - 1, selectedDateArr[0]);
                var validToStr = $('#DateMetadataValidTo').val();
                var validToArr = validToStr.split('.');
                var ValidToDate = new Date(validToArr[2], validToArr[1] - 1, validToArr[0]);

                if (ValidToDate < selectedDate) {
                    alert('Gyldig fra dato må være mindre enn gyldig til dato');
                    var newDate = new Date(ValidToDate);
                    newDate.setDate(newDate.getDate() - 1);
                    $('#DateMetadataValidFrom').val(newDate.getDate() + '.' + (newDate.getMonth() + 1) + '.' + newDate.getFullYear())
                        }
            });

            $("#DateMetadataValidTo").change(function (event) {
                event.preventDefault();
                var selectedDateStr = $('#DateMetadataValidTo').val();
                var selectedDateArr = selectedDateStr.split('.');
                var selectedDate = new Date(selectedDateArr[2], selectedDateArr[1] - 1, selectedDateArr[0]);
                var validFromStr = $('#DateMetadataValidFrom').val();
                var validFromArr = validFromStr.split('.');
                var ValidFromDate = new Date(validFromArr[2], validFromArr[1] - 1, validFromArr[0]);

                if (selectedDate < ValidFromDate) {
                    alert('Gyldig til dato må være større enn gyldig fra dato');
                    var newDate = new Date(ValidFromDate);
                    newDate.setDate(newDate.getDate() + 1);
                    $('#DateMetadataValidTo').val(newDate.getDate() + '.' + (newDate.getMonth() + 1) + '.' + newDate.getFullYear())
                        }
            });

            $("#QualitySpecificationDate").change(function (event) {
                event.preventDefault();
                var currentDate = new Date();
                var selectedDateStr = $('#QualitySpecificationDate').val();
                var selectedDateArr = selectedDateStr.split('.');
                var selectedDate = new Date(selectedDateArr[2], selectedDateArr[1] - 1, selectedDateArr[0]);
                if (selectedDate > currentDate) {
                    alert('Dato kan ikke være i fremtiden');
                    $('#QualitySpecificationDate').val(currentDate.getDate() + '.' + (currentDate.getMonth() + 1) + '.' + currentDate.getFullYear())
                        }
            });
        });

        function AddAdministrativeKeyWords() {

            var selectorPrefix = "keywords-national-initiative";
            $('#' + selectorPrefix + '-list').empty();
            var inputName = "KeywordsNationalInitiative";
            var key = $('#keywords-national-initiative-list li').length;

            if ($('#keyword-dok-valid-kmd').prop('checked')) {
                var value = $('#keyword-dok-valid-kmd').val();
                $('#' + selectorPrefix + '-list').append('<li><input type="text" name="' + inputName + '[' + key + ']" value="' + value + '"/></li>');
                key = key + 1;
            }

            if ($('#keyword-inspire-valid').prop('checked')) {
                var value = $('#keyword-inspire-valid').val();
                $('#' + selectorPrefix + '-list').append('<li><input type="text" name="' + inputName + '[' + key + ']" value="' + value + '"/></li>');
                key = key + 1;
            }

            if ($('#keyword-geodatalaw').prop('checked')) {
                var value = $('#keyword-geodatalaw').val();
                $('#' + selectorPrefix + '-list').append('<li><input type="text" name="' + inputName + '[' + key + ']" value="' + value + '"/></li>');
                key = key + 1;
            }

            if ($('#keyword-norgedigitalt').prop('checked')) {
                var value = $('#keyword-norgedigitalt').val();
                $('#' + selectorPrefix + '-list').append('<li><input type="text" name="' + inputName + '[' + key + ']" value="' + value + '"/></li>');
                key = key + 1;
            }

            if ($('#keyword-areal-plans').prop('checked')) {
                var value = $('#keyword-areal-plans').val();
                $('#' + selectorPrefix + '-list').append('<li><input type="text" name="' + inputName + '[' + key + ']" value="' + value + '"/></li>');
                key = key + 1;
            }

            $('#KeywordsCatalogs :selected').each(function () {
                optionValue = $(this);
                var value = optionValue.val();
                $('#' + selectorPrefix + '-list').append('<li><input type="text" name="' + inputName + '[' + key + ']" value="' + value + '"/></li>');
                key = key + 1;
            });
        }

        function removeReferenceSystem(refID) {
            var elem = document.getElementById("referenceRow" + refID);
            elem.parentNode.removeChild(elem);
            document.getElementById('ReferenceSystemsCount').value -= 1;
        };

        //Setting placeholders
        var placeholderText = "Skriv inn";
        var placeholderTextChoose = "Klikk for å velge";

        $(document).ready(function () {
            $('form').find("input[type=textarea], input[type=text], textarea").each(function (ev) {
                if (!$(this).val() && !$(this).prop("disabled")) {
                    $(this).attr("placeholder", placeholderText);
                }
            });

            $('form').find("select").each(function (ev) {
                if ($(this).val() === '') {
                    idElem = $(this)[0].id;
                    $("#" + idElem + " option[value='']").text(placeholderTextChoose);
                }
            });

        });


        function loadConcepts() {
            $.ajax({
                headers: {
                    Accept: "application/rdf+xml",
                    "Content-Type": "text/plain; charset=utf-8"
                },
                type: "GET",
                url: $("#ApplicationSchema").val(),
                success: setConcepts
            });
        }

        function setConcepts(xml) {
            var conceptFound = false;
            $('#KeywordsConceptAlert').removeClass("alert alert-warning");
            $('#KeywordsConceptAlert').html("");
            $("#KeywordsConcept option").remove();
            $(xml).find("skos\\:Concept, Concept").each(function () {
                var prefLabel = $(this).find("skos\\:prefLabel, prefLabel").text();
                var about = $(this).attr("rdf:about");
                $('#KeywordsConcept').append($("<option selected></option>")
                    .attr("value", prefLabel + "|" + about)
                    .text(prefLabel));
                conceptFound = true;
            });
            $('#KeywordsConcept').trigger("chosen:updated");
            if (!conceptFound) {
                $('#KeywordsConceptAlert').addClass("alert alert-warning");
                $('#KeywordsConceptAlert').html("Fant ingen begreper");
            }
        }

    </script>
}


<script>
        var vueModel = new Vue({
            el: "#vue-container",
            store: new Vuex.Store(Store),
            data: {
                selectedTab: 'basic',
                tabs: [
                    { id: 'basic', name: 'Grunleggende', iconClass: 'glyphicon glyphicon-home' },
                    { id: 'timeAndSpace', name: 'Tid og rom', iconClass: 'glyphicon glyphicon-list-alt' },
                    { id: 'contact', name: 'Kontaktinformasjon', iconClass: 'glyphicon glyphicon-user' },
                    { id: 'distribution', name: 'Distribusjon', iconClass: 'glyphicon glyphicon-globe' },
                    { id: 'documents', name: 'Dokumentasjon', iconClass: 'glyphicon glyphicon-file' },
                    { id: 'constraints', name: 'Restriksjoner', iconClass: 'glyphicon glyphicon-lock' },
                    { id: 'keywords', name: 'Nøkkelord', iconClass: 'glyphicon glyphicon-ok-sign' },
                    { id: 'quality', name: 'Kvalitet', iconClass: 'glyphicon glyphicon-ok-sign' },
                    { id: 'admin', name: 'Administrativt', iconClass: 'glyphicon glyphicon-cog' }
                ],
                model: @ViewModelJson,
                viewBag: @ViewBagJson,
                selectedValues: {
                    timeAndSpace: {
                        boundingBox: {
                            areas: []
                        }
                    },
                    documents: {
                        keywordsConcept: {
                            concepts: []
                        }
                    },
                    admin: {
                        keywordsCatalogs: []
                    }
                }
            },
            computed: {
                isDatasetOrDatasetSeries: function () {
                    var hierarchyLevel = this.$root.model.HierarchyLevel;
                    return hierarchyLevel == 'dataset' || hierarchyLevel == 'series';
                },
                isSoftware: function () {
                    var hierarchyLevel = this.$root.model.HierarchyLevel;
                    return hierarchyLevel == 'software' || hierarchyLevel == 'series';
                },
                isService: function () {
                    var hierarchyLevel = this.$root.model.HierarchyLevel;
                    return hierarchyLevel == "service";
                },
                hasCoverageImage: function () {
                    var hasCoverageImage = false;
                    this.$store.getters['Thumbnails'].forEach(function (thumbnail) {
                        if (thumbnail.Type == 'dekningsoversikt') {
                            hasCoverageImage = true;
                            return;
                        }
                    });
                    return hasCoverageImage;
                }
            },
            created: function () {
                this.setSelectedLanguage();
            },
            mounted: function () {
                this.selectedTab = this.getSelectedTab();
                if (applicationEnvironment == "dev") {
                    for (var getter in this.$store.getters) {
                        if (this.$store.getters.hasOwnProperty(getter)) {
                            if (this.$store.getters[getter] === undefined) {
                                console.log('Vuex getter: "' + getter + '" is undefined');
                            }
                        }
                    }
                }
                $('textarea').autosize();
            },
            methods: {
                getSelectedTab: function () {
                    var tabId = Cookies.get('navtabselected');
                    var selectedTab = this.tabs[0];
                    this.tabs.forEach(function (tab) {
                        if (tab.id == tabId) {
                            selectedTab = tab;
                        }
                    });
                    return selectedTab;
                },
                setSelectTab: function (tab) {
                    this.selectedTab = tab;
                    Cookies.set('navtabselected', tab.id);
                },
                setSelectedLanguage: function () {
                    var selectedLanguage = Cookies.get('_culture') !== undefined ? Cookies.get('_culture') : 'no';
                    this.$store.commit('updateSettingsSelectedLanguage', selectedLanguage);
                },
                getSelectedCoverageImage: function () {
                    var selectedCoverageImage = {};
                    $store.getters['Thumbnails'].forEach(function (thumbnail) {
                        if (thumbnail.Type == 'dekningsoversikt') {
                            selectedCoverageImage = thumbnail;
                            return;
                        }
                    });
                    return selectedCoverageImage;
                },
            },
            components: {
                Basic: Basic,
                TimeAndSpace: TimeAndSpace,
                Contact: Contact,
                Distribution: Distribution,
                Documents: Documents,
                Constraints: Constraints,
                Keywords: Keywords,
                Quality: Quality,
                Admin: Admin
            }
        });
</script>
