<script>
    var Getters = {
        modelStateValues: function (state) {
            return state.modelStateValues;
        },
        errorsInTabs: function (state) {
            return state.errorsInTabs;
        },
        settingsTabs: function (state) {
            return state.settings.tabs;
        },
        settingsSelectedTab: function (state) {
            return state.settings.selectedTab;
        },
        settings: function (state) {
            return state.settings;
        },
        settingsLanguages: function (state) {
            return state.settings.languages;
        },
        settingsLanguages_all: function (state) {
            return state.settings.languages.all;
        },
        settingsLanguages_en: function (state) {
            return state.settings.languages.en;
        },
        settingsLanguages_no: function (state) {
            return state.settings.languages.no;
        },
        settingsSelectedLanguage: function (state) {
            return state.settings.selectedLanguage;
        },
        settingsDatepicker: function (state) {
            return state.settings.datepicker;
        },
        settingsDatepickerRegional: function (state) {
            return state.settings.datepicker.regional;
        },
        settingsDatepickerRegionalNb: function (state) {
            return state.settings.datepicker.regional.nb;
        },
        Title: function (state) {
            return state.model.Title;
        },
        EnglishTitle: function (state) {
            return state.model.EnglishTitle;
        },
        ResourceReferenceCodespace: function (state) {
            return state.model.ResourceReferenceCodespace;
        },
        Language: function (state) {
            return state.model.Language;
        },
        MetadataLanguage: function (state) {
            return state.model.MetadataLanguage;
        },
        ResourceReferenceCode: function (state) {
            return state.model.ResourceReferenceCode;
        },
        Abstract: function (state) {
            return state.model.Abstract;
        },
        EnglishAbstract: function (state) {
            return state.model.EnglishAbstract;
        },
        SupplementalDescription: function (state) {
            return state.model.SupplementalDescription;
        },
        EnglishSupplementalDescription: function (state) {
            return state.model.EnglishSupplementalDescription;
        },
        HelpUrl: function (state) {
            return state.model.HelpUrl;
        },
        SpecificUsage: function (state) {
            return state.model.SpecificUsage;
        },
        EnglishSpecificUsage: function (state) {
            return state.model.EnglishSpecificUsage;
        },
        Purpose: function (state) {
            return state.model.Purpose;
        },
        EnglishPurpose: function (state) {
            return state.model.EnglishPurpose;
        },
        DateUpdated: function (state) {
            return state.model.DateUpdated;
        },
        DatePublished: function (state) {
            return state.model.DatePublished;
        },
        DateCreated: function (state) {
            return state.model.DateCreated;
        },
        DateMetadataValidFrom: function (state) {
            return state.model.DateMetadataValidFrom;
        },
        DateMetadataValidTo: function (state) {
            return state.model.DateMetadataValidTo;
        },
        MaintenanceFrequency: function (state) {
            return state.model.MaintenanceFrequency;
        },
        MaintenanceFrequencyValues: function (state) {
            return state.viewBag.MaintenanceFrequencyValues;
        },
        BoundingBoxNorth: function (state) {
            return state.model.BoundingBoxNorth;
        },
        BoundingBoxEast: function (state) {
            return state.model.BoundingBoxEast;
        },
        BoundingBoxSouth: function (state) {
            return state.model.BoundingBoxSouth;
        },
        BoundingBoxWest: function (state) {
            return state.model.BoundingBoxWest;
        },
        SelectedBoundingBoxAreas: function (state) {
            return state.data.SelectedBoundingBoxAreas;
        },
        CoverageUrl: function (state) {
            return state.model.CoverageUrl;
        },
        ContactMetadata: function (state) {
            return state.model.ContactMetadata;
        },
        ContactMetadataName: function (state) {
            return state.model.ContactMetadata.Name;
        },
        ContactMetadataEmail: function (state) {
            return state.model.ContactMetadata.Email;
        },
        ContactMetadataOrganization: function (state) {
            return state.model.ContactMetadata.Organization;
        },
        ContactMetadataRole: function (state) {
            return state.model.ContactMetadata.Role;
        },
        ContactPublisher: function (state) {
            return state.model.ContactPublisher;
        },
        ContactPublisherName: function (state) {
            return state.model.ContactPublisher.Name;
        },
        ContactPublisherEmail: function (state) {
            return state.model.ContactPublisher.Email;
        },
        ContactPublisherOrganization: function (state) {
            return state.model.ContactPublisher.Organization;
        },
        ContactPublisherRole: function (state) {
            return state.model.ContactPublisher.Role;
        },
        ContactOwner: function (state) {
            return state.model.ContactPublisher;
        },
        ContactOwnerName: function (state) {
            return state.model.ContactOwner.Name;
        },
        ContactOwnerEmail: function (state) {
            return state.model.ContactOwner.Email;
        },
        ContactOwnerOrganization: function (state) {
            return state.model.ContactOwner.Organization;
        },
        ContactOwnerRole: function (state) {
            return state.model.ContactOwner.Role;
        },
        SpatialRepresentation: function (state) {
            return state.model.SpatialRepresentation;
        },
        SpatialRepresentationValues: function (state) {
            return state.viewBag.SpatialRepresentationValues;
        },
        VectorFormats: function (state) {
            return state.viewBag.VectorFormats;
        },
        RasterFormats: function (state) {
            return state.viewBag.RasterFormats
        },
        TextFormats: function (state) {
            return state.data.TextFormats;
        },
        TinFormats: function (state) {
            return state.data.TinFormats;
        },
        StereoImageFormats: function (state) {
            return state.data.StereoImageFormats;
        },
        VideoFormats: function (state) {
            return state.data.VideoFormats;
        },
        FormatDistributions: function (state) {
            return state.model.FormatDistributions;
        },
        OrganizationDistributorValues: function (state) {
            return state.viewBag.OrganizationDistributorValues;
        },
        PredefinedDistributionProtocols: function (state) {
            return state.viewBag.predefinedDistributionProtocols;
        },
        ReferenceSystems: function (state) {
            return state.model.ReferenceSystems;
        },
        ReferenceSystemsValues: function (state) {
            return state.viewBag.ReferenceSystemsValues;
        },
        Operations: function (state) {
            return state.model.Operations;
        },
        ServicePlatforms: function (state) {
            return state.viewBag.ServicePlatforms;
        },
        ProductSpecificationUrl: function (state) {
            return state.model.ProductSpecificationUrl;
        },
        productSpecificationUrlIsAdded: function (state) {
            return state.model.ProductSpecificationUrl !== null && state.model.ProductSpecificationUrl.length > 0;
        },
        ProductspesificationValues: function (state) {
            return state.viewBag.ProductspesificationValues;
        },
        ApplicationSchema: function (state) {
            return state.model.ApplicationSchema;
        },
        KeywordsConcept: function (state) {
            return state.model.KeywordsConcept;
        },
        ProductSpecificationOther: function (state) {
            return state.model.ProductSpecificationOther;
        },
        ProductSpecificationOtherName: function (state) {
            return state.model.ProductSpecificationOther.Name;
        },
        ProductSpecificationOtherURL: function (state) {
            return state.model.ProductSpecificationOther.URL;
        },
        ProductSheetUrl: function (state) {
            return state.model.ProductSheetUrl;
        },
        ProductsheetValues: function (state) {
            return state.viewBag.ProductsheetValues;
        },
        LegendDescriptionUrl: function (state) {
            return state.model.LegendDescriptionUrl
        },
        LegendDescriptionValues: function (state) {
            return state.viewBag.LegendDescriptionValues;
        },
        ProductPageUrl: function (state) {
            return state.model.ProductPageUrl;
        },
        ThumbnailUrl: function (state) {
            return state.viewBag.ThumbnailUrl;
        },
        Thumbnails: function (state) {
            return state.model.Thumbnails;
        },
        SelectedCoverageImage: function (state) {
            var thumbnails = state.model.Thumbnails;
            var selectedCoverageImage = {};
            if (thumbnails !== null && thumbnails.length) {
                thumbnails.forEach(function (thumbnail) {
                    if (thumbnail.Type == 'dekningsoversikt') {
                        selectedCoverageImage = thumbnail;
                        return;
                    }
                });
            }
            return selectedCoverageImage;
        },
        UseLimitations: function (state) {
            return state.model.UseLimitations;
        },
        EnglishUseLimitations: function (state) {
            return state.model.EnglishUseLimitations;
        },
        AccessConstraints: function (state) {
            return state.model.AccessConstraints;
        },
        AccessConstraintValues: function (state) {
            return state.viewBag.AccessConstraintValues;
        },
        UseConstraints: function (state) {
            return state.model.UseConstraints;
        },
        UseConstraintValues: function (state) {
            return state.viewBag.UseConstraintValues
        },
        LicenseTypesValues: function (state) {
            return state.viewBag.LicenseTypesValues;
        },
        OtherConstraintsLinkText: function (state) {
            return state.model.OtherConstraintsLinkText;
        },
        OtherConstraintsLink: function (state) {
            return state.model.OtherConstraintsLink;
        },
        OtherConstraints: function (state) {
            return state.model.OtherConstraints;
        },
        EnglishOtherConstraints: function (state) {
            return state.model.EnglishOtherConstraints;
        },
        SecurityConstraints: function (state) {
            return state.model.SecurityConstraints;
        },
        SecurityConstraintValues: function (state) {
            return state.viewBag.SecurityConstraintValues;
        },
        SecurityConstraintsNote: function (state) {
            return state.model.SecurityConstraintsNote;
        },
        TopicCategory: function (state) {
            return state.model.TopicCategory;
        },
        TopicCategoryValues: function (state) {
            return state.viewBag.TopicCategoryValues;
        },
        KeywordsTheme: function (state) {
            return state.model.KeywordsTheme;
        },
        KeywordsNationalTheme: function (state) {
            return state.model.KeywordsNationalTheme
        },
        NationalThemeValues: function (state) {
            return state.viewBag.NationalThemeValues;
        },
        KeywordsNationalInitiative: function (state) {
            return state.model.KeywordsNationalInitiative;
        },
        NationalInitiativeValues: function (state) {
            return state.viewBag.NationalInitiativeValues;
        },
        KeywordsInspire: function (state) {
            return state.model.KeywordsInspire;
        },
        InspireValues: function (state) {
            return state.viewBag.InspireValues;
        },
        KeywordsInspirePriorityDataset: function (state) {
            return state.model.KeywordsInspirePriorityDataset;
        },
        InspirePriorityDatasets: function (state) {
            return state.viewBag.InspirePriorityDatasets;
        },
        KeywordsOther: function (state) {
            return state.model.KeywordsOther;
        },
        KeywordsEnglish: function (state) {
            return state.model.KeywordsEnglish;
        },
        KeywordsPlace: function (state) {
            return state.model.KeywordsPlace;
        },
        KeywordsAdministrativeUnits: function (state) {
            return state.model.KeywordsAdministrativeUnits;
        },
        SelectedResolutionFormat: function (state) {
            if (state.data.SelectedResolutionFormat) {
                return state.data.SelectedResolutionFormat;
            }
            else if (state.data.ResolutionScale?.length) {
                return "ResolutionScale";
            } else if (state.data.ResolutionDistance?.length) {
                return "ResolutionDistance";
            } else {
                return "ResolutionScale";
            };
        },
        showSpatialResolution: function (state, getters) {
            return !getters.isService;
        },
        ResolutionScale: function (state) {
            return state.model.ResolutionScale;
        },
        showResolutionScale: function (state, getters) {
            return getters.SelectedResolutionFormat == 'ResolutionScale';
        },
        ResolutionDistance: function (state) {
            return state.model.ResolutionDistance;
        },
        showResolutionDistance: function (state, getters) {
            return getters.SelectedResolutionFormat == 'ResolutionDistance';
        },
        Status: function (state) {
            return state.model.Status;
        },
        StatusValues: function (state) {
            return state.viewBag.StatusValues;
        },
        ProcessHistory: function (state) {
            return state.model.ProcessHistory;
        },
        EnglishProcessHistory: function (state) {
            return state.model.EnglishProcessHistory;
        },
        OrderingInstructions: function (state) {
            return state.model.OrderingInstructions;
        },
        OrderingInstructionsValues: function (state) {
            return state.viewBag.OrderingInstructionsValues;
        },
        KeywordDokValidKmd: function (state) {
            return state.data.KeywordDokValidKmd;
        },
        KeywordInspireValid: function (state) {
            return state.data.KeywordInspireValid;
        },
        KeywordGeodatalaw: function (state) {
            return state.data.KeywordGeodatalaw;
        },
        KeywordsCatalogs: function (state) {
            return state.data.KeywordsCatalogs;
        },
        CatalogValues: function (state) {
            return state.viewBag.CatalogValues;
        },
        KeywordNorgedigitalt: function (state) {
            return state.data.KeywordNorgedigitalt;
        },
        KeywordArealPlans: function (state) {
            return state.data.KeywordArealPlans;
        },
        QualitySpecificationTitleInspire: function (state) {
            if (state.settings.visibleConformitySections['QualitySpecificationInspire'] !== undefined && state.settings.visibleConformitySections['QualitySpecificationInspire']) {
                return state.model.QualitySpecificationTitleInspire;
            } else {
                return '';
            }
        },
        QualitySpecificationDateInspire: function (state) {
            return '08.12.2010';
        },
        QualitySpecificationDateTypeInspire: function (state) {
            return 'publication';
        },
        QualitySpecificationResultInspire: function (state) {
            return state.model.QualitySpecificationResultInspire;
        },
        showQualitySpecificationExplanationInspire: function (state) {
            return state.model.QualitySpecificationResultInspire == "false" || state.model.QualitySpecificationResultInspire == false;
        },
        QualitySpecificationExplanationInspire: function (state) {
            return state.model.QualitySpecificationResultInspire == "false" || state.model.QualitySpecificationResultInspire == false ? state.model.QualitySpecificationExplanationInspire : "";
        },
        EnglishQualitySpecificationExplanationInspire: function (state) {
            return state.model.QualitySpecificationResultInspire == "false" || state.model.QualitySpecificationResultInspire == false ? state.model.EnglishQualitySpecificationExplanationInspire : "";

        },
        QualitySpecificationResultInspireSpatialNetworkServices: function (state) {
            return state.model.QualitySpecificationResultInspireSpatialNetworkServices;
        },
        showQualitySpecificationResultInspireSpatialNetworkServices: function (state, getters) {
            return getters.isService && getters.isNetworkService;
        },
        QualitySpecificationResultInspireSpatialServiceInteroperability: function (state) {
            return state.model.QualitySpecificationResultInspireSpatialServiceInteroperability;
        },
        QualitySpecificationResultInspireSpatialServiceTechnicalConformance: function (state) {
            return state.model.QualitySpecificationResultInspireSpatialServiceTechnicalConformance;
        },
        showQualitySpecificationResultInspireSpatialServiceInteroperability: function (state, getters) {
            return getters.isService && getters.isAccessPoint && getters.isInspire;
        },
        showQualitySpecificationResultInspireSpatialServiceTechnicalConformance: function (state, getters) {
            return getters.isService && getters.isAccessPoint && (state.model.QualitySpecificationTitleInspireSpatialServiceTechnicalConformance != null && state.model.QualitySpecificationTitleInspireSpatialServiceTechnicalConformance !='');
        },
        QualitySpecificationResultInspireSpatialServiceConformance: function (state) {
            return state.model.QualitySpecificationResultInspireSpatialServiceConformance;
        },
        QualitySpecificationTitleInspireSpatialServiceConformance: function (state) {
            return state.model.QualitySpecificationTitleInspireSpatialServiceConformance;
        },
        QualitySpecificationTitleInspireSpatialServiceTechnicalConformance: function (state) {
            return state.model.QualitySpecificationTitleInspireSpatialServiceTechnicalConformance;
        },
        QualitySpecificationTitleInspireSpatialServiceConformanceValues: function (state, getters) {
            if (getters.settingsSelectedLanguage == 'no') {
                return state.data.QualitySpecificationTitleInspireSpatialServiceConformanceValues;
            } else if (getters.settingsSelectedLanguage == 'en') {
                return state.data.EnglishQualitySpecificationTitleInspireSpatialServiceConformanceValues;
            } else {
                return state.data.EnglishQualitySpecificationTitleInspireSpatialServiceConformanceValues;
            }
        },
        QualityQuantitativeResultAvailability: function (state) {
            return state.model.QualityQuantitativeResultAvailability;
        },
        QualityQuantitativeResultCapacity: function (state) {
            return state.model.QualityQuantitativeResultCapacity;
        },
        QualityQuantitativeResultPerformance: function (state) {
            return state.model.QualityQuantitativeResultPerformance;
        },
        showQualitySpecificationResultInspireSpatialServiceConformance_Invocable: function (state, getters) {
            return getters.isService && getters.isAccessPoint && getters.QualitySpecificationTitleInspireSpatialServiceConformance == 'invocable';
        },
        showQualitySpecificationResultInspireSpatialServiceConformance_Interoperable: function (state, getters) {
            return getters.isService && getters.isAccessPoint && getters.QualitySpecificationTitleInspireSpatialServiceConformance == 'interoperable';
        },
        showQualitySpecificationResultInspireSpatialServiceConformance_Harmonised: function (state, getters) {
            return getters.isService && getters.isAccessPoint && getters.QualitySpecificationTitleInspireSpatialServiceConformance == 'harmonised';
        },
        QualitySpecificationTitleSosi: function (state) {
            return state.model.QualitySpecificationTitleSosi;
        },
        QualitySpecificationDateSosi: function (state) {
            return state.model.QualitySpecificationDateSosi;
        },
        QualitySpecificationDateTypeSosi: function (state) {
            return 'publication';
        },
        QualitySpecificationResultSosi: function (state) {
            return state.model.QualitySpecificationResultSosi;
        },
        showQualitySpecificationExplanationSosi: function (state) {
            var qualitySpecificationSosiNeedsExplanation = state.model.QualitySpecificationResultSosi == "false" || state.model.QualitySpecificationResultSosi == false;
            var productSpecificationUrlIsAdded = state.model.ProductSpecificationUrl !== null && state.model.ProductSpecificationUrl.length > 0;
            return qualitySpecificationSosiNeedsExplanation && productSpecificationUrlIsAdded;
        },
        QualitySpecificationExplanationSosi: function (state) {
            return state.model.QualitySpecificationResultSosi == "false" || state.model.QualitySpecificationResultSosi == false ? state.model.QualitySpecificationExplanationSosi : "";

        },
        EnglishQualitySpecificationExplanationSosi: function (state) {
            return state.model.QualitySpecificationResultSosi == "false" || state.model.QualitySpecificationResultSosi == false ? state.model.EnglishQualitySpecificationExplanationSosi : "";
        },
        QualitySpecificationResultSosiConformApplicationSchema: function (state) {
            return state.model.QualitySpecificationResultSosiConformApplicationSchema;
        },
        QualitySpecificationResultSosiConformGmlApplicationSchema: function (state) {
            return state.model.QualitySpecificationResultSosiConformGmlApplicationSchema;
        },
        QualitySpecificationTitle: function (state) {
            if (state.settings.visibleConformitySections['QualitySpecificationCustom'] !== undefined && state.settings.visibleConformitySections['QualitySpecificationCustom']) {
                return state.model.QualitySpecificationTitle;
            } else {
                return '';
            }
        },
        QualitySpecificationDate: function (state) {
            return state.model.QualitySpecificationDate;
        },
        QualitySpecificationDateType: function (state) {
            return 'publication';
        },
        QualitySpecificationResult: function (state) {
            return state.model.QualitySpecificationResult;
        },
        showQualitySpecificationExplanation: function (state) {
            return state.model.QualitySpecificationResult == "false" || state.model.QualitySpecificationResult == false;
        },
        QualitySpecificationExplanation: function (state) {
            return state.model.QualitySpecificationResult == "false" || state.model.QualitySpecificationResult == false ? state.model.QualitySpecificationExplanation : "";
        },
        EnglishQualitySpecificationExplanation: function (state) {
            return state.model.QualitySpecificationResult == "false" || state.model.QualitySpecificationResult == false ? state.model.EnglishQualitySpecificationExplanation : "";
        },
        operation: function (state) {
            return state.viewBag.operation;
        },
        isDataset: function (state) {
            return state.model.HierarchyLevel == 'dataset';
        },
        isDatasetSeries: function (state) {
            return state.model.HierarchyLevel == 'series';
        },
        isSoftware: function (state) {
            return state.model.HierarchyLevel == 'software';
        },
        isService: function (state) {
            return state.model.HierarchyLevel == 'service';
        },
        showQualityQuantitativeResult: function (state, getters) {
            return getters.isService && getters.isInspire;
        },
        isHarmonized: function (state) {
            return state.model.QualitySpecificationTitleInspireSpatialServiceConformance == 'harmonised';
        },
        isNetworkService: function (state, getters) {
            let isNetworkService = false;
            getters.FormatDistributions.forEach(function (formatDistribution) {
                getters.NetworkServiceProtocols.forEach(function (networkServiceProtocol) {
                    if (formatDistribution.Key.Protocol == networkServiceProtocol) {
                        isNetworkService = true;
                        return;
                    }
                });
                if (isNetworkService) return
            });
            return isNetworkService;
        },
        isAccessPoint: function (state, getters) {
            let isAccessPoint = false;
            getters.FormatDistributions.forEach(function (formatDistribution) {
                getters.AccessPointProtocols.forEach(function (accessPointProtocol) {
                    if (formatDistribution.Key.Protocol == accessPointProtocol) {
                        isAccessPoint = true;
                        return;
                    }
                });
                if (isAccessPoint) return
            });
            return isAccessPoint;
        },
        AccessPointProtocols: function (state) {
            return state.data.AccessPointProtocols;
        },
        NetworkServiceProtocols: function (state) {
            return state.data.NetworkServiceProtocols;
        },
        visibleConformitySections: function (state) {
            return state.settings.visibleConformitySections
        },
        showQualitySpecificationResultSosiConformApplicationSchema: function (state, getters) {
            var formatIsAdded = false;
            getters['FormatDistributions'].forEach(function (formatDistribution) {
                formatDistribution.Value.Formats.forEach(function (format) {
                    if (format.Name == 'SOSI') {
                        formatIsAdded = true;
                        return;
                    }
                });
            });
            return formatIsAdded && !getters['isService'];
        },
        showQualitySpecificationResultSosiConformGmlApplicationSchema: function (state, getters) {
            var formatIsAdded = false;
            getters['FormatDistributions'].forEach(function (formatDistribution) {
                formatDistribution.Value.Formats.forEach(function (format) {
                    if (format.Name == 'GML') {
                        formatIsAdded = true;
                        return;
                    }
                });
            });
            return formatIsAdded && !getters['isService'];
        },
        isInspire: function (state, getters) {
            var keyword = 'Inspire';
            var isAdded = false;
            if (getters['KeywordsNationalInitiative'] !== null) {
                getters['KeywordsNationalInitiative'].forEach(function (addedKeyword) {
                    if (keyword == addedKeyword) isAdded = true;
                });
            }
            return isAdded;
        }
    }
</script>
