@using Resources

<script type="text/x-template" id="boundingBox-template">
    <div class="panel panel-default">
        <div class="panel-heading">
            <div class="row">
                <div class="col-md-11">Geografisk utstrekning</div>
                <div v-if="helpText" class="col-md-1">
                    <span v-on:click="helpText.active = !helpText.active" v-bind:class="{active: helpText.active}" class="badge help-text-toggle">?</span>
                </div>
                <div class="clearfix"></div>
            </div>
        </div>
        <div class="panel-body">
            <p v-if="helpText && helpText.active" class="help-text bg-success" v-html="helpText.content"></p>

            <div class="form-group has-feedback">
                <div class="form-group has-feedback">
                    <div class="row">
                        <label class="col-md-2 control-label">{{ areaSelect.label }}</label>


                        <div class="col-md-4">

                            <div class="custom-select-list">
                                <div class="custom-select-list-input-container">
                                    <span v-for="area in $parent.$parent.selectedValues.timeAndSpace.boundingBox.areas" class="custom-select-list-selected">
                                        {{ area.Name }}
                                        <span v-on:click="removeSelectedArea(area)" class="custom-select-list-remove-button"></span>
                                    </span>
                                    <input type="text" class="custom-select-list-input" />
                                </div>

                                <div class="custom-select-list-dropdown-container">
                                    <div class="custom-select-list-dropdown">
                                        <div class="custom-select-list-dropdown-content">
                                            <div v-for="areaGroup in areaSelect.otherAreaGroups" class="custom-select-list-option-group">
                                                <p class="custom-select-list-option-group-name">{{ areaGroup.Name }}</p>
                                                <ul class="custom-select-list-options area-option-list">
                                                    <li v-on:click="addSelectedArea(area)" v-bind:class="{'is-selected': areaIsSelected(area)}" v-for="area in areaGroup.Areas">{{ area.Name }}</li>
                                                </ul>
                                            </div>
                                            <div v-for="county in areaSelect.counties" class="custom-select-list-option-group">
                                                <p class="custom-select-list-option-group-name">{{ county.Name }}</p>
                                                <ul class="custom-select-list-options area-option-list">
                                                    <li v-on:click="addSelectedArea(county)" v-bind:class="{'is-selected': areaIsSelected(county)}">{{ county.Name }}</li>
                                                    <li v-on:click="addSelectedArea(municipality)" v-bind:class="{'is-selected': areaIsSelected(municipality)}" v-for="municipality in county.Municipalities">{{ municipality.Name }}</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <label class="col-md-2 control-label">Eller angi koordinater</label>

                        <div class="col-md-3">
                            <div class="form-group has-feedback no-margin-bottom no-padding-bottom">
                                <div class="input-group">
                                    <span class="input-group-addon">Nord</span>
                                    <input name="BoundingBoxNorth" type="text" v-model="$parent.$parent.model.BoundingBoxNorth" class="form-control" />
                                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                                </div>
                            </div>
                            <div class="form-group has-feedback no-margin-bottom no-padding-bottom">
                                <div class="input-group">
                                    <span class="input-group-addon">Øst</span>
                                    <input name="BoundingBoxEast" type="text" v-model="$parent.$parent.model.BoundingBoxEast" class="form-control" />

                                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                                </div>
                            </div>
                            <div class="form-group has-feedback no-margin-bottom no-padding-bottom">
                                <div class="input-group">
                                    <span class="input-group-addon">Sør</span>
                                    <input name="BoundingBoxSouth" type="text" v-model="$parent.$parent.model.BoundingBoxSouth" class="form-control" />
                                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                                </div>
                            </div>
                            <div class="form-group has-feedback no-margin-bottom no-padding-bottom">
                                <div class="input-group">
                                    <span class="input-group-addon">Vest</span>
                                    <input name="BoundingBoxWest" type="text" v-model="$parent.$parent.model.BoundingBoxWest" class="form-control" />
                                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                                </div>
                            </div>


                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</script>


<script>
    var BoundingBox = {
        name: "boundingBox",
        template: "#boundingBox-template",
        data: function () {
            return {
                helpText: {
                    active: false,
                    content: 'Skriv inn koordinatverdier for utstrekning, eller bruk  forhåndsdefinerte områdenavn i nedtrekkslisten dersom de geografiske dataene gjelder for et bestemt fylke eller en kommune. Desimalskille er punktum. Du kan også angi koordinatene ved å bruke knappen "Angi i kartet" for å definere et rektangel i Norgeskart.'
                },
                areaSelect:
                {
                    name: '',
                    value: '',
                    label: 'Angi område',
                    type: 'select',
                    counties: [
                        { Name: 'Akershus', CountyCode: '02', BoundingBoxNorth: '60.605148', BoundingBoxSouth: '59.471882', BoundingBoxEast: '11.926978', BoundingBoxWest: '10.328467', Municipalities: this.getMunicipalitiesInCounty('02') },
                        { Name: 'Aust-Agder', CountyCode: '09', BoundingBoxNorth: '59.672687', BoundingBoxSouth: '57.917234', BoundingBoxEast: '9.668877', BoundingBoxWest: '6.824533', Municipalities: this.getMunicipalitiesInCounty('09') },
                        { Name: 'Buskerud', CountyCode: '06', BoundingBoxNorth: '61.09172', BoundingBoxSouth: '59.407871', BoundingBoxEast: '10.634994', BoundingBoxWest: '7.438842', Municipalities: this.getMunicipalitiesInCounty('06') },
                        { Name: 'Finnmark', CountyCode: '20', BoundingBoxNorth: '71.384879', BoundingBoxSouth: '68.554592', BoundingBoxEast: '31.761485', BoundingBoxWest: '20.479733', Municipalities: this.getMunicipalitiesInCounty('20') },
                        { Name: 'Hedmark', CountyCode: '04', BoundingBoxNorth: '62.696928', BoundingBoxSouth: '59.840785', BoundingBoxEast: '12.870849', BoundingBoxWest: '9.583827', Municipalities: this.getMunicipalitiesInCounty('04') },
                        { Name: 'Hordaland', CountyCode: '12', BoundingBoxNorth: '61.035238', BoundingBoxSouth: '59.475421', BoundingBoxEast: '7.732115', BoundingBoxWest: '4.184771', Municipalities: this.getMunicipalitiesInCounty('12') },
                        { Name: 'Møre og Romsdal', CountyCode: '15', BoundingBoxNorth: '63.768169', BoundingBoxSouth: '61.956584', BoundingBoxEast: '9.584212', BoundingBoxWest: '4.816602', Municipalities: this.getMunicipalitiesInCounty('15') },
                        { Name: 'Nordland', CountyCode: '18', BoundingBoxNorth: '69.596701', BoundingBoxSouth: '64.939497', BoundingBoxEast: '18.151355', BoundingBoxWest: '10.57806', Municipalities: this.getMunicipalitiesInCounty('18') },
                        { Name: 'Oppland', CountyCode: '05', BoundingBoxNorth: '62.378402', BoundingBoxSouth: '60.13161', BoundingBoxEast: '11.153986', BoundingBoxWest: '7.34253', Municipalities: this.getMunicipalitiesInCounty('05') },
                        { Name: 'Oslo', CountyCode: '21', BoundingBoxNorth: '60.135106', BoundingBoxSouth: '59.809311', BoundingBoxEast: '10.951389', BoundingBoxWest: '10.489165', Municipalities: this.getMunicipalitiesInCounty('21') },
                        { Name: 'Rogaland', CountyCode: '11', BoundingBoxNorth: '59.844574', BoundingBoxSouth: '58.027854', BoundingBoxEast: '7.214667', BoundingBoxWest: '4.454274', Municipalities: this.getMunicipalitiesInCounty('11') },
                        { Name: 'Sogn og Fjordane', CountyCode: '14', BoundingBoxNorth: '62.382396', BoundingBoxSouth: '60.675548', BoundingBoxEast: '8.322053', BoundingBoxWest: '4.087526', Municipalities: this.getMunicipalitiesInCounty('14') },
                        { Name: 'Telemark', CountyCode: '08', BoundingBoxNorth: '60.188272', BoundingBoxSouth: '58.603311', BoundingBoxEast: '9.969765', BoundingBoxWest: '7.096288', Municipalities: this.getMunicipalitiesInCounty('08') },
                        { Name: 'Troms', CountyCode: '19', BoundingBoxNorth: '70.703616', BoundingBoxSouth: '68.356014', BoundingBoxEast: '22.894466', BoundingBoxWest: '15.592542', Municipalities: this.getMunicipalitiesInCounty('14') },
                        { Name: 'Trøndelag', CountyCode: '50', BoundingBoxNorth: '65.470175', BoundingBoxSouth: '63.180687', BoundingBoxEast: '14.325986', BoundingBoxWest: '9.699817', Municipalities: this.getMunicipalitiesInCounty('19') },
                        { Name: 'Vest-Agder', CountyCode: '10', BoundingBoxNorth: '59.189687', BoundingBoxSouth: '57.759005', BoundingBoxEast: '8.37168', BoundingBoxWest: '6.149699', Municipalities: this.getMunicipalitiesInCounty('10') },
                        { Name: 'Vestfold', CountyCode: '07', BoundingBoxNorth: '59.701938', BoundingBoxSouth: '58.720455', BoundingBoxEast: '10.67502', BoundingBoxWest: '9.755336', Municipalities: this.getMunicipalitiesInCounty('07') },
                        { Name: 'Østfold', CountyCode: '01', BoundingBoxNorth: '59.790586', BoundingBoxSouth: '58.76096', BoundingBoxEast: '11.946004', BoundingBoxWest: '10.536679', Municipalities: this.getMunicipalitiesInCounty('01') }
                    ],
                    otherAreaGroups: [
                        {
                            Name: 'Landsdekkende',
                            Areas: [
                                { Name: 'Hele landet', AreaCode: '00', BoundingBoxNorth: '72', BoundingBoxSouth: '57', BoundingBoxEast: '33', BoundingBoxWest: '2' }
                            ]
                        }
                    ],
                }

            };
        },
        methods: {
            areaIsSelected: function (area) {
                var areaIsSelected = false;
                this.$parent.$parent.selectedValues.timeAndSpace.boundingBox.areas.forEach(function (selectedArea) {
                    if (area.CountyCode !== undefined) {
                        if (area.CountyCode == selectedArea.CountyCode) areaIsSelected = true;
                    } else if (area.MunicipalityCode !== undefined) {
                        if (area.MunicipalityCode == selectedArea.MunicipalityCode) areaIsSelected = true;
                    }
                    else if (area.AreaCode !== undefined) {
                        if (area.AreaCode == selectedArea.AreaCode) areaIsSelected = true;
                    }
                })
                return areaIsSelected;
            },
            removeSelectedArea: function (area) {
                var selectedAreaIndex = this.$parent.$parent.selectedValues.timeAndSpace.boundingBox.areas.indexOf(area);
                if (selectedAreaIndex > -1) {
                    this.$parent.$parent.selectedValues.timeAndSpace.boundingBox.areas.splice(selectedAreaIndex, 1);
                }
                this.setBoundingBoxCoordinates();
            },
            addSelectedArea: function (area) {
                if (!this.areaIsSelected(area)) {
                    this.$parent.$parent.selectedValues.timeAndSpace.boundingBox.areas.push(area);
                }
                this.setBoundingBoxCoordinates();
            },
            getMunicipalitiesInCounty: function (countyCode) {
                var municipalitiesInCounty = [];
                this.$parent.$parent.viewBag.Municipalities.forEach(function (municipality) {
                    if (municipality.MunicipalityCode.substring(0, 2) == countyCode) {
                        municipalitiesInCounty.push(municipality);
                    }
                });
                return municipalitiesInCounty;
            },
            getSelectedAreasBoundingBox: function () {
                var boundingBox = {
                    north: '',
                    south: '',
                    east: '',
                    west: ''
                }
                var boundingBoxIsEmpty = true;
                this.$parent.$parent.selectedValues.timeAndSpace.boundingBox.areas.forEach(function (selectedArea) {
                    if (boundingBoxIsEmpty) {
                        boundingBox.north = selectedArea.BoundingBoxNorth;
                        boundingBox.south = selectedArea.BoundingBoxSouth;
                        boundingBox.east = selectedArea.BoundingBoxEast;
                        boundingBox.west = selectedArea.BoundingBoxWest;
                        boundingBoxIsEmpty = false;
                    } else {
                        if (parseFloat(selectedArea.BoundingBoxNorth) > parseFloat(boundingBox.north)) boundingBox.north = selectedArea.BoundingBoxNorth;
                        if (parseFloat(selectedArea.BoundingBoxSouth) < parseFloat(boundingBox.south)) boundingBox.south = selectedArea.BoundingBoxSouth;
                        if (parseFloat(selectedArea.BoundingBoxEast) > parseFloat(boundingBox.east)) boundingBox.east = selectedArea.BoundingBoxEast;
                        if (parseFloat(selectedArea.BoundingBoxWest) < parseFloat(boundingBox.west)) boundingBox.west = selectedArea.BoundingBoxWest;
                    }
                });
                return boundingBox;
            },
            setBoundingBoxCoordinates: function () {
                boundingBox = this.getSelectedAreasBoundingBox();
                this.$root.model.BoundingBoxNorth = boundingBox.north;
                this.$root.model.BoundingBoxSouth = boundingBox.south;
                this.$root.model.BoundingBoxEast = boundingBox.east;
                this.$root.model.BoundingBoxWest = boundingBox.west;
            }
        },
        mounted: function () {
            initCustomSelectList();
        }

    };
</script>

