@using Resources

<script type="text/x-template" id="admin-template">
    <div>
        <div v-for="formElement in checkboxes">
            <input type="checkbox" v-bind:id="formElement.name" v-bind:checked="isAdded(formElement.value)" v-on:change="toggleCheckbox(formElement.value)" />
            <label v-bind:for="formElement.name">{{ formElement.label }}</label>
        </div>
        <label>{{ keywordsCatalogs.label }}</label>
        <div class="custom-select-list">
            <div class="custom-select-list-input-container">
                <span v-if="isAdded(option.Value)" v-for="option in keywordsCatalogs.options" class="custom-select-list-selected">
                    {{ option.Text }}
                    <span v-on:click="removeKeyword(option.Value)" class="custom-select-list-remove-button"></span>
                </span>
                <input type="text" class="custom-select-list-input" />
            </div>
            <div class="custom-select-list-dropdown-container">
                <div class="custom-select-list-dropdown">
                    <div class="custom-select-list-dropdown-content">
                        <ul class="custom-select-list-options area-option-list">
                            <li v-on:click="addKeyword(option.Value);" v-bind:class="{'is-selected': isAdded(option.Value)}" v-for="option in keywordsCatalogs.options">{{ option.Text }}</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<script>
    var Admin = {
        name: "Admin",
        template: "#admin-template",
        data: function () {
            return {
                checkboxes: {
                    keywordDokValidKmd: {
                        name: 'keyword-dok-valid-kmd',
                        value: 'Det offentlige kartgrunnlaget',
                        label: '@Html.Raw(UI.Metadata_Admin_KeywordDokValidKmd)',
                        type: 'checkbox'
                    },
                    keywordInspireValid: {
                        name: 'keyword-inspire-valid',
                        value: 'Inspire',
                        label: '@Html.Raw(UI.Metadata_Admin_KeywordInspireValid)',
                        type: 'checkbox'
                    },
                    keywordGeodatalaw: {
                        name: 'keyword-geodatalaw',
                        value: 'geodataloven',
                        label: '@Html.Raw(UI.Metadata_Admin_KeywordGeodatalaw)',
                        type: 'checkbox'
                    },
                    keywordNorgedigitalt: {
                        name: 'keyword-norgedigitalt',
                        value: 'Norge digitalt',
                        label: '@Html.Raw(UI.Metadata_Admin_KeywordNorgeDigitalt)',
                        type: 'checkbox'
                    },
                    keywordArealPlans: {
                        name: 'keyword-areal-plans',
                        value: 'arealplanerPBL',
                        label: '@Html.Raw(UI.Metadata_Admin_KeywordArealPlans)',
                        type: 'checkbox'
                    }
                },
                keywordsCatalogs: {
                    name: 'KeywordsCatalogs',
                    label: 'Høsting til ulike samarbeid',
                    type: 'select',
                    options: this.$store.getters['CatalogValues']
                },
            }
        },
        methods: {
            toggleCheckbox: function (keyword) {
                if (this.isAdded(keyword)) {
                    this.removeKeyword(keyword);
                } else {
                    this.addKeyword(keyword);
                }
            },
            addKeyword: function (keyword) {
                this.$store.dispatch('addMultilingualKeyword', { keywordName: 'NationalInitiative', value: keyword });
            },
            removeKeyword: function (keyword) {
                keywordIndex = null;
                this.$store.getters['KeywordsNationalInitiative'].forEach(function (addedKeyword, index) {
                    if (keyword == addedKeyword) keywordIndex = index;
                });
                if (keywordIndex !== null) {
                    this.$store.dispatch('removeMultilingualKeyword', { keywordName: 'NationalInitiative', keywordIndex: keywordIndex });
                }
            },
            isAnOption: function (keyword) {
                var isAnOption = false;
                this.options.forEach(function (option) {
                    if (option.Value == keyword) isAnOption = true;
                });
                return isAnOption;
            },
            isAdded: function (keyword) {
                var isAdded = false;
                this.$store.getters['KeywordsNationalInitiative'].forEach(function (addedKeyword) {
                    if (keyword == addedKeyword) isAdded = true;
                });
                return isAdded;
            }
        },
        mounted: function () {
            initCustomSelectList();
        }
    };
</script>
