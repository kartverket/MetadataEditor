@using Resources

<script type="text/x-template" id="resolution-section-template">
    <div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-md-11">
                        <span>{{ title }}</span>
                    </div>
                    <div class="col-md-1">
                        <span v-on:click="helpText.active = !helpText.active" v-bind:class="{active: helpText.active}" class="badge help-text-toggle">?</span>
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
            <div class="panel-body">
                <p v-if="helpText && helpText.active" class="help-text bg-success" v-html="helpText.content"></p>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-3">
                            <label for="ResolutionScale" class="control-label">@Html.Raw(UI.Metadata_ResolutionScale_Label)</label>
                        </div>
                        <div class="col-md-9">
                            <input class="form-control" id="ResolutionScale" name="ResolutionScale" type="text" v-bind:value="$store.getters['ResolutionScale']" v-on:change="checkResolution()" />
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-md-3">
                            <label for="ResolutionDistance" class="control-label">@Html.Raw(UI.Metadata_ResolutionDistance_Label)</label>
                        </div>
                        <div class="col-md-9">
                            <input class="form-control" id="ResolutionDistance" name="ResolutionDistance" type="text" v-bind:value="$store.getters['ResolutionDistance']" v-on:change="checkResolution()" />
                        </div>
                    </div>
                </div>
        </div>

    </div>
</script>

<script type="text/x-template" id="quality-template">
    <div>
        <div is="Resolution"></div>
        <div class="form-group" v-if="isVisible(formElement)" v-for="formElement in formElements">
            <div class="row">
                <label for="formElement.id" class="col-md-3 control-label">{{ formElement.label }}</label>
                <div class="col-md-8">
                    <p v-if="formElement.helpText && formElement.helpText.active" class="help-text bg-success" v-html="formElement.helpText.content"></p>
                    <div is="field" v-bind:form-element="formElement"></div>
                </div>
                <div v-if="formElement.helpText" class="col-md-1">
                    <p class="form-control-static">
                        <span v-on:click="formElement.helpText.active = !formElement.helpText.active" v-bind:class="{active: formElement.helpText.active}" class="badge help-text-toggle">?</span>
                    </p>
                </div>
            </div>
        </div>
    </div>
</script>


<script>
    var Resolution = {
        name: "ResolutionSection",
        template: "#resolution-section-template",
        components: {
            Resolution: Resolution
        },
        props: ["section"],
        data: function () {
            return {
                title: "Romlig oppløsning",
                helpText: {
                        active: true,
                        content: '@Html.Raw(UI.Helptext_SpatialResolution)'
                    },
                selectedLanguage: this.$store.getters['settingsSelectedLanguage']
            }
        },
        methods: {
            checkResolution: function () {
                if (document.getElementById('ResolutionScale').value != '' && document.getElementById('ResolutionDistance').value != '')
                {
                    alert('Du må velge enten Målestokkstall eller Distanse i meter');
                }
            }
        }
    };
</script>


<script>
    var Quality = {
        name: "quality",
        template: "#quality-template",
        components: {
            Field: Field,
            Resolution: Resolution
        },
        mounted: function () {
            this.$store.dispatch('getErrorsForTab', { tabName: 'Quality' }).then(function (errors) {
                this.errors = errors;
            }.bind(this));
        },
        data: function () {
            return {
                errors: {},
                formElements: {
                    status: {
                        id: 'Status',
                        name: 'Status',
                        getter: 'Status',
                        mutation: 'updateStatus',
                        label: '@Html.Raw(UI.Metadata_Status_Label)',
                        type: 'select',
                        required: false,
                        visible: true,
                        options: this.$root.viewBag.StatusValues,
                        helpText: {
                            active: false,
                            content: '@Html.Raw(UI.Helptext_Status)'
                        }
                    },
                    processHistory: {
                        multilingual: {
                            no: {
                                name: 'ProcessHistory',
                                getter: 'ProcessHistory',
                                mutation: 'updateProcessHistory'
                            },
                            en: {
                                name: 'EnglishProcessHistory',
                                getter: 'EnglishProcessHistory',
                                mutation: 'updateEnglishProcessHistory'
                            }
                        },
                        selectedLanguage: this.$store.getters['settingsSelectedLanguage'],
                        label: '@Html.Raw(UI.Metadata_ProcessHistory_Label)',
                        type: 'textarea',
                        required: false,
                        visible: true,
                        helpText: {
                            active: false,
                            content: '@Html.Raw(UI.Helptext_ProcessHistory)'
                        }
                    },
                    orderingInstructions: {
                        id: 'OrderingInstructions',
                        name: 'OrderingInstructions',
                        getter: 'OrderingInstructions',
                        mutation: 'updateOrderingInstructions',
                        label: '@Html.Raw(UI.Metadata_OrderingInstructions_Label)',
                        type: 'select',
                        required: false,
                        visibleGetter: 'isService',
                        options: this.$root.viewBag.OrderingInstructionsValues,
                        helpText: {
                            active: false,
                            content: '@Html.Raw(UI.Helptext_OrderingInstructions)'
                        }
                    },
                    qualityQuantitativeResultAvailability: {
                        id: 'QualityQuantitativeResultAvailability',
                        name: 'QualityQuantitativeResultAvailability',
                        getter: 'QualityQuantitativeResultAvailability',
                        mutation: 'updateQualityQuantitativeResultAvailability',
                        label: '@UI.Availability',
                        type: 'text',
                        required: true,
                        visibleGetter: 'showQualityQuantitativeResult',
                        helpText: {
                            active: false,
                            content: '@UI.QualityQuantitativeResultAvailability'
                        }
                    },
                    qualityQuantitativeResultCapacity: {
                        id: 'QualityQuantitativeResultCapacity',
                        name: 'QualityQuantitativeResultCapacity',
                        getter: 'QualityQuantitativeResultCapacity',
                        mutation: 'updateQualityQuantitativeResultCapacity',
                        label: '@UI.Capacity',
                        type: 'text',
                        required: true,
                        visibleGetter: 'showQualityQuantitativeResult',
                        helpText: {
                            active: false,
                            content: '@UI.QualityQuantitativeResultCapacity'
                        }
                    }
                    ,
                    qualityQuantitativeResultPerformance: {
                        id: 'QualityQuantitativeResultPerformance',
                        name: 'QualityQuantitativeResultPerformance',
                        getter: 'QualityQuantitativeResultPerformance',
                        mutation: 'updateQualityQuantitativeResultPerformance',
                        label: '@UI.Performance',
                        type: 'text',
                        required: true,
                        visibleGetter: 'showQualityQuantitativeResult',
                        helpText: {
                            active: false,
                            content: '@UI.QualityQuantitativeResultPerformance'
                        }
                    }
                }
            }
        },
        methods: {
            isVisible: function (formElement) {
                if (formElement.visibleGetter !== undefined) {
                    return this.$store.getters[formElement.visibleGetter] === true || this.$store.getters[formElement.visibleGetter] == 'true';
                } else if (formElement.visible !== undefined) {
                    return formElement.visible === true || formElement.visible == 'true';
                } else {
                    return true;
                }
            }
        }
    };
</script>

