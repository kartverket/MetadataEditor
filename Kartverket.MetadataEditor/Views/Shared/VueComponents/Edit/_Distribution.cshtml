<script type="text/x-template" id="distribution-template">
    <div>

        <div v-if="isDatasetOrDatasetSeries()" class="form-group">
            <div class="row">
                <label for="SpatialRepresentation" class="col-md-3 control-label">Representasjonsform</label>
                <div class="col-md-3">
                    <div class="custom-select">
                        <select v-model="selectedSpatialRepresentation" class="form-control">
                            <option v-bind:value="option.Value" v-for="option in spatialRepresentation.options">{{ option.Text }}</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <div is="distribution-item" v-bind:distribution="distribution" v-bind:distribution-index="index" v-for="(distribution, propertyName, index) in $parent.model.FormatDistributions"></div>

    </div>
</script>

@Html.Partial("VueComponents/Edit/Distribution/_DistributionItem")


<script>
    var Distribution = {
        name: "distribution",
        template: "#distribution-template",
        props: [],
        components: {
            distributionItem: DistributionItem
        },
        data: function () {
            return {
                spatialRepresentation: {
                    options: this.$parent.viewBag.SpatialRepresentationValues
                },
                selectedSpatialRepresentation: this.$parent.model.SpatialRepresentation,
                distributionFormats: {
                    vector: this.$parent.viewBag.VectorFormats,
                    grid: this.$parent.viewBag.RasterFormats,
                    textTable: [
                        { Text: "CSV", Value: "CSV" },
                        { Text: "Microsoft Excel", Value: "Microsoft Excel" },
                        { Text: "DBF", Value: "DBF" },
                        { Text: "Tekstfil", Value: "Tekstfil" }
                    ],
                    tin: [
                        { Text: "Intergraph TIN", Value: "Intergraph TIN" },
                        { Text: "ESRI TIN", Value: "ESRI TIN" },
                        { Text: "GEOPAK TIN", Value: "GEOPAK TIN" },
                        { Text: "LandXML TIN", Value: "LandXML TIN" }
                    ],
                    stereoModel: [
                        { Text: "Intergraph TIN", Value: "Intergraph TIN" },
                        { Text: "JPEG", Value: "JPEG" }
                    ],
                    video: [
                        { Text: "MPEG", Value: "MPEG" },
                        { Text: "AVI", Value: "AVI" },
                        { Text: "MOV", Value: "MOV" },
                        { Text: "OGG", Value: "OGG" },
                        { Text: "WMV", Value: "WMV" },
                        { Text: "RealVideo", Value: "RealVideo" },
                        { Text: "RMVB", Value: "RMVB" },
                        { Text: "FLASH", Value: "FLASH" },
                        { Text: "ASF", Value: "ASF" },
                        { Text: "MP4", Value: "MP4" },
                        { Text: "QuickTime", Value: "QuickTime" }
                    ]
                }

            };
        },
        methods: {
            isDatasetOrDatasetSeries: function () {
                var hierarchyLevel = this.$parent.model.HierarchyLevel;
                return hierarchyLevel == 'dataset' || hierarchyLevel == 'series';
            },
            isSoftware: function () {
                var hierarchyLevel = this.$parent.model.HierarchyLevel;
                return hierarchyLevel == 'software' || hierarchyLevel == 'series';
            },
            setOrganizationHiddenFieldElements: function () {
                console.log("setOrganizationHiddenFieldElements");
            },
            setProtocolHiddenFieldElements: function () {
                console.log("setProtocolHiddenFieldElements");
            }
        }

    };
</script>
